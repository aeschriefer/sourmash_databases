# first, gather all '.fna.gz'
import os
import random

configfile: "config.yml"

genomes_location = config['genomes_location']
sigs_output_location = config['sigs_output_location']

all_files = []
for root, dirs, files in os.walk(genomes_location, topdown=False):
    for name in files:
        if name.endswith('_genomic.fna.gz'):
            filename = os.path.join(root, name)
            if filename.startswith('./'): filename = filename[2:]
            all_files.append(filename)

print('found {} files under {}'.format(len(all_files), genomes_location))
random.shuffle(all_files)
print('examples:', all_files[:5])

def make_sigfile(filename):
    genomefile = os.path.basename(filename)
    sigfile = os.path.join(sigs_output_location, genomefile) + '.sig'

    return sigfile

# rule all: make sigs
rule all:
    input:
        [ make_sigfile(genomefile) for genomefile in all_files ],
        "gtdb-release89-k31.lca.json.gz"

rule make_lineage_csv:
    input:
        config['gtdb_taxonomy_tsv']
    output:
        'gtdb-lineages.csv'
    shell:
        '../update-gtdb-taxonomy.py {input} -o {output}'

rule make_lca_db:
    input:
        "gtdb-lineages.csv",
        [ make_sigfile(genomefile) for genomefile in all_files ]
    output:
        "gtdb-release89-k31.lca.json.gz"
    shell:
        """sourmash lca index -k 31 \
                           --scaled 10000 --require-taxonomy \
                           --split-identifiers \
                           --report report-gtdb-k31.txt \
                           --traverse-directory -C 3 \
                           gtdb-lineages.csv \
                           gtdb-release89-k31.lca.json.gz {sigs_output_location}
        """

class _lookupName(object):
    def __init__(self):
        self.filename_to_names = None

    def _load(self):
        import csv
        d = {}
        with open('gtdb-lineages.csv', 'rt') as fp:
            r = csv.DictReader(fp)
            for row in r:
                d[row['filename']] = "{} {}".format(row['accession'], row['species'])
        self.filename_to_names = d

    def __getitem__(self, key):
        if self.filename_to_names is None:
            self._load()
        key = os.path.basename(key)
        print('looking up', key)
        return self.filename_to_names[key]

filename_to_names = _lookupName()


# generic rule: compute signature
rule compute_sig:
    input:
        os.path.join(genomes_location, "{filename}"),
        'gtdb-lineages.csv'
    output:
        os.path.join(sigs_output_location + "{filename}.sig")
    params:
        signame = lambda wildcards: filename_to_names[wildcards.filename]
    shell:
        "sourmash compute -k 21,31,51 --scaled=2000 {input[0]} -o {output} --merge={params.signame:q}"
